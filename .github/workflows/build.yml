name: build

on:
  schedule:
    - cron: "42 6 * * *"

  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      tag: ${{ steps.result.outputs.tag }}

    steps:
      - name: Get upstream tag
        uses: oprypin/find-latest-tag@v1
        id: upstream_tag
        with:
          repository: rclone/rclone
          releases-only: true

      - name: Upstream tag ${{ steps.upstream_tag.outputs.tag }}
        run: echo "Upstream tag ${{ steps.upstream_tag.outputs.tag }}"

      - name: Get downstream tag
        uses: oprypin/find-latest-tag@v1
        id: downstream_tag
        continue-on-error: true
        with:
          repository: ${{ github.repository }}

      - name: Downstream tag ${{ steps.downstream_tag.outputs.tag }}
        run: echo "Downstream tag ${{ steps.downstream_tag.outputs.tag }}"

      - name: Result
        id: result
        run: |
          if [[ "${{ steps.upstream_tag.outputs.tag }}" == "${{ steps.downstream_tag.outputs.tag }}" ]]
          then
            echo 'Build not required.'
          else
            echo 'Build is required.'
            echo tag=${{ steps.upstream_tag.outputs.tag }} >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: windows-latest
    timeout-minutes: 10
    needs: check
    if: needs.check.outputs.tag != ''

    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          $tag = "${{ needs.check.outputs.tag }}".TrimStart("v")
          $version = [version]::new($tag)
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "versionMajor=$($version.Major)" >> $env:GITHUB_OUTPUT
          echo "versionMinor=$($version.Minor)" >> $env:GITHUB_OUTPUT
          echo "versionBuild=$($version.Build)" >> $env:GITHUB_OUTPUT

      - name: Setup wix
        run: |
          dotnet.exe tool install --global wix --version 5.0.2 --verbosity diag

          wix.exe extension add WixToolset.UI.wixext/5.0.2 --global
          wix.exe extension add WixToolset.Util.wixext/5.0.2 --global
          wix.exe extension list --global

      - name: Download rclone
        run: |
          gh.exe release download ${{ needs.check.outputs.tag }} --pattern '*-windows-amd64.zip' --repo rclone/rclone
          Get-ChildItem
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract rclone
        run: |
          New-Item -Name tmp -ItemType Directory -ErrorAction Stop |Out-Null
          Expand-Archive -Path '*-windows-amd64.zip' -DestinationPath tmp -ErrorAction Stop
          Get-ChildItem -Path tmp -Recurse
          New-Item -Name build -ItemType Directory -ErrorAction Stop |Out-Null
          Get-ChildItem -Path tmp -Include '*.exe','*.html' -Recurse |Move-Item -Destination ./build -ErrorAction Stop

      - name: Build installer
        run: |
          wix.exe `
            build `
            -arch x64 `
            -src src\Product.wxs `
            -d ProductSource="$(Resolve-Path ./build)" `
            -d ProductVersion="${{ steps.version.outputs.version }}" `
            -ext WixToolset.UI.wixext `
            -out rclone.msi

      - name: Validate installer
        run: wix.exe msi validate rclone.msi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rclone-msi
          path: ./rclone.msi
          if-no-files-found: error

      - name: Test installer
        run: |
          $process = Start-Process msiexec.exe -ArgumentList '/i','rclone.msi','/qn' -Wait -NoNewWindow -PassThru -ErrorAction Stop
          if ($process.ExitCode -ne 0)
          {
              throw 'Non zero exit code: "{0}".' -f $process.ExitCode
          }

          $path = Join-Path $env:ProgramFiles 'rclone\rclone.exe'
          & $path version

      - name: Publish release
        run: gh.exe release create ${{ needs.check.outputs.tag }} --notes 'Rclone Windows build packaged as an msi.' rclone.msi
        env:
          # Requires a personal access token with a fine-grained permission of contents:read/write.
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
